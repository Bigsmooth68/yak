# Copyright: (c) 2022, dbi services, distributed without any warranty under the terms of the GNU General Public License v3
- name: Gather information about instance
  delegate_to: localhost
  community.aws.ec2_instance_info:
    region: "{{ region_id }}"
    filters:
      "tag:Name": "{{ vm_name }}"
      instance-state-name: [ "pending", "running", "shutting-down", "stopping", "stopped" ]
  register: r_ec2_instance_info

- debug: var=r_ec2_instance_info
  when: debug | bool

- name: Get volume(s) info from EC2 Instance
  delegate_to: localhost
  amazon.aws.ec2_vol_info:
    region: "{{ region_id }}"
    filters:
      attachment.instance-id: "{{ r_ec2_instance_info.instances[0].instance_id }}"
      "tag:Name": disk*
  register: r_attached_volumes

- debug: var=r_attached_volumes
  when: debug | bool

- name: Re-collect facts after disk addition and ensure expected data is present
  setup:
  until: ansible_devices|dict2items|json_query('[?value.model==`Amazon Elastic Block Store`].key')|length > number_of_devices|int
  retries: 10
  delay: 5

- set_fact:
    linux_devices: "{{ ansible_devices|dict2items|json_query('[?value.serial==`vol0f67d2344b5367de8`].key') }}"

- debug: var=linux_devices
  when: debug | bool

- set_fact:
    merged_list: []

- set_fact:
    merged_list: >
      {{ merged_list  +
        [
          {
            'volume_id': item.id,
            'device_name': ansible_devices|dict2items|json_query('[?value.serial==`'+item.id|replace("vol-","vol")+'`].key|[0]')
          }
        ]
      }}
  with_items: "{{ r_attached_volumes.volumes }}"

- debug: var=merged_list
  when: debug | bool

- set_fact:
    pvs_list: []

- set_fact:
    pvs_list: "{{ pvs_list + [ '/dev/' + item.device_name ] }}"
  with_items: "{{ merged_list }}"

- debug: var=pvs_list
  when: debug | bool

- name: Create a volume group
  become: yes
  lvg:
    vg: "{{ volume_group_name }}"
    pvs: "{{ pvs_list }}"
